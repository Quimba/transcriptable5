#!/usr/bin/env ruby

require 'optparse'
require 'typingpool'
require 'fileutils'
require 'tempfile'
require 'tmpdir'
include Typingpool::App::FriendlyExceptions

options = {
  :files => [],
  :voices => [],
  :unusual => [],
  :chunk => '1:00',
}
OptionParser.new do |opts|
  options[:banner] = "USAGE: #{File.basename($PROGRAM_NAME)} PROJECTNAME FILE [FILE [FILE...]]\n"
  options[:banner] += "  [--chunks 1:00] [--subtitle 'Hack Day interview']\n"
  options[:banner] += "  [--voice 'John' --voice 'Pat Foo, British female'...]\n"
  options[:banner] += "  [--unusual 'Hack Day' --unusual 'Sunnyvale, Chad Dickerson'...]\n"
  options[:banner] += "  [--bitrate 256] [--config PATH]\n"
  options[:banner] += "  [--title PROJECTNAME] [--file foo.mp3 [--file bar.mp3...]]\n"
  opts.banner = options[:banner]

  opts.on('--title TITLE', 
          'Required. For file names and transcript.', 
          'Also accepted as first argument') do |title|
    options[:title] = title
  end

  opts.on('--file FILE', 
          'Required. Audio for transcribing.', 
          'Repeatable (sorting is by name).', 
          'Also accepted as second and later arguments') do |file|
    options[:files].push(file)
  end

  opts.on('--subtitle SUBTITLE',
          'For transcript') do |subtitle|
    options[:subtitle] = subtitle
  end

  opts.on('--chunks MM:SS', 
          'Default: 1:00. Audio divided thusly for',
          'transcribing. Try also HH:MM:SS and SSS') do |chunk|
    options[:chunk] = chunk
  end

  opts.on('--voice "NAME[, DESCR]"', 
          'Name, optional description of recorded', 
          'person, to aid transcriber. Repeatable') do |voice|
    options[:voices].push(voice)
  end

  opts.on('--unusual WORD[,WORD,]', 
          'Unusual word within recording, to aid', 
          'transcriber. Commas for multiple.',
          'Repeatable') do |word|
    options[:unusual].push(word)
  end

  opts.on('--config PATH',
          'Default: ~/.typingpool. A config file') do |path|
    options[:config] = path
  end

  opts.on('--bitrate KBPS',
          'Default: Mirror input. Output bitrate in',
          'kb/s. Only applies if/when converting to',
          'MP3') do |kbps|
    options[:bitrate] = kbps
  end

  opts.on('--testnoupload',
          'For testing purposes only. Ignore.',
          'Suppresses uploading.'
          ) do
    options[:noupload] = true
  end

  opts.on('--testkeepmergefile',
          'For testing purposes only. Ignore.',
          'Preserves merge file.'
          ) do
    options[:keepmerge] = true
  end

  opts.on('--testfixture=PATH',
          'For testing purposes only. Ignore.',
          'A VCR fixture for running with mock data.') do |fixture|
    require 'typingpool/app/test'
    options[:fixture] = fixture
  end

  opts.on('--testfixturerecord',
          'For testing purposes only. Ignore.',
          'Allows recording of a new fixture',
          'to --testfixture path.') do
    options[:fixturerecord] = true
  end

  opts.on('--help',
          'Display this screen.') do
    puts opts
    exit
  end
end.parse!

Typingpool::App.if_missing_dependencies do |missing|
  missing.map!{|cmd| "`#{cmd}`" }
  them = missing.count > 1 ? 'them' : 'it'
  abort "It looks like you're missing #{Typingpool::Utility.join_in_english(missing)}. You'll need to install #{them} before Typingpool can run."
end

options[:title] ||= ARGV.shift if ARGV.count > 0
options[:files].push(ARGV).flatten! if ARGV.count > 0
options[:banner] += "\n#{Typingpool::App::CLI.help_arg_explanation}\n"
abort "No files specified\n\n#{options[:banner]}" if options[:files].empty?
abort "No title specified\n\n#{options[:banner]}" if options[:title].to_s.empty?
options[:files].sort!
options[:files].each do |file|
  File.extname(file) or abort "You need a file extension on the file '#{file}'"
  File.exists?(file) or abort "There is no file '#{file}'"
  File.file?(file) or abort "Not a file: '#{file}'"
end
options[:unusual].map!{|unusual| unusual.split(/\s*,\s*/)}.flatten!
options[:voices].map! do |voice| 
  name, description = voice.split(/\s*,\s*/)
  {
    :name => name,
    :description => (description || '')
  }
end

config = Typingpool::App::CLI.config_from_arg(options[:config]) or abort "No config file at '#{options[:config]}'"

project = with_friendly_exceptions('project title', options[:title]) do
  Typingpool::Project.new(options[:title], config) 
end

with_friendly_exceptions('--chunk argument', options[:chunk]) do
  project.interval = options[:chunk] if options[:chunk] 
end

with_friendly_exceptions('--bitrate argument', options[:bitrate]) do
  project.bitrate = options[:bitrate] if options[:bitrate]
end

if project.local
  if (File.exists?(project.local.file('data', 'assignment.csv')) &&
      project.local.file('data', 'assignment.csv').as(:csv).read.select{|assignment| assignment['audio_uploaded'] == 'maybe' }.count > 0)
    #project where the upload died partway through
    STDERR.puts "Fixing incomplete project"
    STDERR.puts "Determining which mp3s need uploading"
  else
    abort "The title '#{options[:title]}' is taken"
  end #if(File.exists(project.local.file('data', 'assignment.csv') &&...
else
  project.create_local
  project.local.subtitle = options[:subtitle] if options[:subtitle]
  options[:files].each{|path| FileUtils.cp(path, project.local.subdir('audio', 'originals')) }

  temp_conversion_dir = Typingpool::Filer::Dir.new(Dir.mktmpdir)
  converted_files = project.local.subdir('audio', 'originals').as(:audio).to_mp3(temp_conversion_dir, project.bitrate) do |file| 
    STDERR.puts "Converting #{File.basename(file) } to mp3" 
  end
  converted_files = Typingpool::Filer::Files::Audio.new(converted_files.sort{|a,b| a.path <=> b.path})

  STDERR.puts "Merging audio" if converted_files.count > 1
  temp_merge_file = Tempfile.new(["#{project.name}.all.", ".mp3"])
  temp_merge_filer = Typingpool::Filer::Audio.new(temp_merge_file.path)
  converted_files.merge(temp_merge_filer)

  STDERR.puts "Splitting audio into uniform bits"
  chunks = temp_merge_filer.split(project.interval_as_min_dot_sec, project.name, project.local.subdir('audio','chunks'))
  urls = project.create_remote_names(chunks).map{|file| project.remote.file_to_url(file) }

  #Write mp3 URLs before uploading, so we can rollback if uploading
  #dies halfway through
  assignment_path = project.create_assignment_csv(:path => ['data', 'assignment.csv'], :urls => urls, :unusual => options[:unusual], :voices => options[:voices])

  temp_merge_file.close
  if options[:keepmerge]
    FileUtils.cp(temp_merge_file.path, project.local.subdir('audio', 'originals'))
  end
  temp_merge_file.unlink
  FileUtils.remove_entry_secure(temp_conversion_dir)
end #if project.local

unless options[:noupload]
  Typingpool::App.vcr_load(options[:fixture], config, not(options[:fixturerecord]), {
                             :preserve_exact_body_bytes => true,
                             :match_requests_on => [:method, Typingpool::App.vcr_core_host_matcher]
                           }) if options[:fixture]
  Typingpool::App.upload_audio_for_project(project) do |file, as|
    STDERR.puts "Uploading #{File.basename(file)} to #{project.remote.host}/#{project.remote.path} as #{as}"
  end
  Typingpool::App.vcr_stop if options [:fixture]
end

if STDOUT.tty? && Typingpool::Utility.os_x?
  STDERR.puts "Opening project folder #{project.local.path}"
  project.local.finder_open 
end

STDERR.puts "Done. Project at:"
puts project.local.path

